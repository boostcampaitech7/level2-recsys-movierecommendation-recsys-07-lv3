# config.yaml
# 직접 하이퍼파라미터를 추가하여 관리할 수 있습니다.

memo: |-
    남겨둘 메모가 있다면 여기에.
    여러 줄로도 작성 가능
    wandb 사용 시 wandb의 description으로 사용됩니다.


# 아래의 일곱 항목들은 argparser로 받은 인자를 우선적으로 사용합니다.
#   $ python main.py --config config.yaml --seed 2024
#   과 같이 실행할 경우 seed는 0이 아닌 2024로 설정됩니다.
predict: False  # 예측할 경우 True로 설정
checkpoint: 'saved/checkpoints/FM_best.pt'   # 예측 시 불러올 모델 경로
seed: 42         # 시드 고정
device: cuda    # 가능한 값 : cpu, cuda, mps
model: EASE       # 모델 선택
wandb: True                            # wandb 사용 여부
wandb_project: 'movie_recommendation' # wandb 프로젝트 이름
run_name: ''                            # wandb 실행 이름. 빈 문자열일 경우 자동 생성

train:
    epochs: 20                          # 학습 에폭 수
    batch_size: 512    # 배치 사이즈
    # log_dir: saved/log                  # 로그 저장 경로
    # ckpt_dir: saved/checkpoint    # 모델 저장 경로
    submit_dir: saved/submit            # 예측 저장 경로
    save_best_model: True               # True: val_loss가 최소인 모델 저장 / False: 모든 모델 저장
    resume: False                               # 이어서 학습할 경우 True
    resume_path: saved/checkpoint/FM_best.pt    # 이어서 학습할 모델 경로

dataset:
    # data_type: SparseDataset
    data_path: ../../data/train/    # 데이터셋 경로
    # valid_method: hybrid            # valid 데이터셋 생성 방식, [hybrid, sequence, random]
    random_items: 2                 # Train / Vaildation split

# dataloader:
#     shuffle: True       # 학습 데이터 셔플 여부
#     num_workers: 4      # 멀티프로세서 수. 0: 메인프로세서만 사용

# 모델 파라미터, model에 해당하는 파라미터만 실질적으로 사용됩니다.
EASE:
    lambda_: 500
MultiVAE:
    p_dims: [200, 600]           # 모델에는 [200, 600, input_dim] 과 같은 형태로 사용 됌
    dropout: 0.2

anneal_cap: 0.2
total_anneal_steps: 20000

optimizer:
    type: Adam      # 사용가능한 optimizer: torch.optim.Optimizer 클래스 (https://pytorch.org/docs/stable/optim.html#algorithms)
    args:           # 사용하고자 하는 클래스의 파라미터를 참고하여 추가해주시면 되며, 관계가 없는 파라미터는 무시됩니다.
        lr: 1e-3            # 예) 모든 옵티마이저에서 사용되는 학습률
        weight_decay: 1e-4  # 예) Adam 등 / L2 정규화 가중치
        amsgrad: False      # 예) Adam 등 / amsgrad 사용 여부

# lr_scheduler:
#     use: False                  # True: 사용 / False: 사용하지 않음 (단, valid_ratio가 0일 경우 validation set이 없어 사용 불가)
#     type: ReduceLROnPlateau     # 사용가능한 lr_scheduler: torch.optim.lr_scheduler 클래스 (https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate)
#     args:                       # 사용하고자 하는 클래스의 파라미터를 참고하여 추가해주시면 되며, 관계가 없는 파라미터는 무시됩니다.
#         mode: 'min'             # 예) ReduceLROnPlateau / 'min' 또는 'max'
#         factor: 0.1             # 예) ReduceLROnPlateau / 학습률 감소 비율
#         step_size: 10           # 예) StepLR / 학습률 감소 주기 (필수)
#         gamma: 0.1              # 예) StepLR 등 / 학습률 감소 비율

loss: loss_function_vae          # 직접 정의한 loss 클래스 또는 torch.nn.Module 클래스 (https://pytorch.org/docs/stable/nn.html#loss-functions)

metrics:                # 평가 지표. 직접 정의한 loss 클래스 또는 torch.nn.Module 클래스 (https://pytorch.org/docs/stable/nn.html#loss-functions)
    top_k: [5, 10]
    num_random_items: 2
    sequence: True
